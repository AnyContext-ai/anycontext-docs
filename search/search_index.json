{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>LLM-powered applications like ChatGPT, Claude, and Zed greatly increases productivity. However, they lack access to the services and data that are crucial to your business.</p> <p>AnyContext bridges the gap between your LLM-powered applications and the context of your business. AnyContext makes it easy to connect your LLM-powered applications to:</p> <ul> <li> <p>External Services like GitHub, Slack, or search engines.</p> </li> <li> <p>Databases like PostgreSQL or MongoDB.</p> </li> <li> <p>Any data exposed through a web API. All you have to do is provide the API documentation, and AnyContext handles the rest.</p> </li> <li> <p>Common building blocks for agents such as code interpreters, browser automation tools and memory management.</p> </li> </ul> <p>Simply put, AnyContext provides Context as a Service to your LLM-powered applications. </p> <p></p> <p>Follow the Getting Started guide to deploy your first MCP server on AnyContext.</p>"},{"location":"context-hub/","title":"Context Hub","text":"<p>Docs coming soon...</p>"},{"location":"how-it-works/","title":"How it works","text":"<p>AnyContext is a cloud-based hosting platform for Model Context Protocol (MCP) servers, enabling seamless integration between generative AI agents and external systems. MCP servers act as specialized connectors, providing a standardized interface that allows AI agents to interact with various services and data sources. With AnyContext, you can easily deploy MCP servers to the cloud, enabling your AI agents to leverage their capabilities effortlessly in a plug-and-play manner.</p>"},{"location":"how-it-works/#architecture","title":"Architecture","text":"<p>AnyContext hosts multiple MCP servers that connect to various external systems, and LLM applications act as MCP clients that communicate with those servers over the network. The MCP servers translate the LLM\u2019s requests into API calls or database queries to fetch or update data, then send the results back so the LLM can incorporate that information into its responses. This architecture decouples the AI from any specific backend, making it easy to plug in new integrations or switch out tools without changing the core application logic.</p> <p></p>"},{"location":"how-it-works/#model-context-protocol","title":"Model Context Protocol","text":"<p>At the heart of AnyContext is the Model Context Protocol (MCP), which is the technical standard that makes seamless integration possible. MCP is an open protocol (created by Anthropic) that defines how LLM-driven applications can communicate with external systems and software packages in a structured, secure manner\u200b. It is often described as the \u201cuniversal adapter\u201d for connecting AI to external data sources and services\u200b. Instead of writing custom code for every integration you want an AI to use, MCP provides a common language for any tool. This greatly simplifies development: a developer can use the same client implementation talk to many different servers (Slack, GitHub, databases, etc.), each exposing its capabilities in a standardized way\u200b.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Docs coming soon...</p>"},{"location":"Getting%20Started/create-a-python-agent/","title":"Python agent tutorial","text":"<p>Docs coming soon...</p>"},{"location":"Getting%20Started/deploy-your-first-mcp-server/","title":"Deploy your first MCP server","text":"<p>This guide will show you how to deploy the YR MCP server on AnyContext which will enable Claude (or other generative AI applications) to access weather forecasts. Sign in or create an account at app.anycontext.io.</p>"},{"location":"Getting%20Started/deploy-your-first-mcp-server/#deploy-the-yr-weather-forecasts-mcp-server","title":"Deploy the YR Weather Forecasts MCP Server","text":"<ol> <li> <p>Navigate to the Context Hub. Here you can find all the available MCP servers you can deploy.</p> <p></p> </li> <li> <p>Click the \"Create\"-button for the YR MCP server.</p> </li> <li> <p>Choose a name for your MCP server deployment. The deployment name will be used to construct the MCP server URL you can reach when connecting from a MCP client. Then click \"Next\". </p> <p></p> </li> <li> <p>Enter a name for your new app. Either select an existing app in order to re-use authentication credentials, or create a new app to get a new set of credentials. New authentication credentials will only be shown once after completing these steps.  </p> <p></p> </li> <li> <p>Congratulations, you have now deployed your first MCP server! \ud83d\ude80</p> <p></p> </li> </ol>"},{"location":"Getting%20Started/deploy-your-first-mcp-server/#connect-to-claude","title":"Connect to Claude","text":"<p>At the moment Claude does not support SSE transport for MCP server connections. However, we can use mcp-proxy in order to proxy between stdio and SSE.</p>"},{"location":"Getting%20Started/deploy-your-first-mcp-server/#install-uv","title":"Install uv","text":"macOS/LinuxWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"Getting%20Started/deploy-your-first-mcp-server/#install-mcp-proxy","title":"Install mcp-proxy","text":"<pre><code>uv tool install mcp-proxy\n</code></pre>"},{"location":"Getting%20Started/deploy-your-first-mcp-server/#configure-claude-desktop","title":"Configure Claude Desktop","text":"<p>Open Claude Desktop, and navigate to the developer settings. Paste the following configuration into the <code>claude_desktop_config.json</code> file: <pre><code>{\n    \"mcpServers\": {\n        \"yr-weather-forecasts\": {\n        \"command\": \"mcp-proxy\",\n        \"args\": [\n            \"https://&lt;your-deployment-id&gt;.mcp.anycontext.io/sse\",\n            \"--headers\",\n            \"x-api-key\",\n            \"&lt;your-secret-key&gt;\"\n        ]\n        }\n    }\n}\n</code></pre> Restart Claude Desktop, and ask about the weather!</p> <p></p> <p></p>"},{"location":"Getting%20Started/mcp-inspector/","title":"Debugging with MCP Inspector","text":"<p>MCP Inspector is an open-source tool for testing and debugging MCP servers. This tutorial will show you how to install MCP inspector and connect to an MCP server hosted on AnyContext.</p>"},{"location":"Getting%20Started/mcp-inspector/#installing-mcp-inspector","title":"Installing MCP Inspector","text":"<ol> <li>The recommended way to install MCP inspector is using npm. If you havent already got node and npm installed, you can follow the guide from here.</li> <li>Open a terminal, and run the command: <code>npx @modelcontextprotocol/inspector</code>. On success, you will see an output like this:     <pre><code>Starting MCP inspector...\nProxy server listening on port 3000\n\n\ud83d\udd0d MCP Inspector is up and running at http://localhost:5173 \ud83d\ude80\n</code></pre></li> </ol>"},{"location":"Getting%20Started/mcp-inspector/#inspecting-an-mcp-server","title":"Inspecting an MCP server","text":"<ol> <li> <p>Find the secret key belonging to the app you created in AnyContext with the MCP server deployment you wish to inspect. Also take note of the MCP server URL.</p> <p></p> </li> <li> <p>Open a browser and navigate to <code>http://localhost:5173</code></p> </li> <li> <p>Choose SSE transport, and fill in the URL and secret key (bearer token) in the connection settings.</p> <p></p> </li> <li> <p>After clicking connect, you can now navigate through all tools, resources, etc. that the the MCP server exposes.</p> <p></p> </li> </ol>"},{"location":"Getting%20Started/thingsboard-agent/","title":"Thingsboard Agent Tutorial","text":"<p>This guide will show you how to create an agent that is capable of analyzing telemetry data from the Thingsboard IoT platform. We will be using AnyContext to host our MCP servers and Thingsboard Cloud for storing telemetry.</p>"},{"location":"Getting%20Started/thingsboard-agent/#prerequisites","title":"Prerequisites","text":"<p>Before we get started, make sure you have the following:</p> <ol> <li>An AnyContext Account: Sign up or log in here.</li> <li>A Thingsboard Cloud Account: Create an account here.</li> </ol>"},{"location":"Getting%20Started/thingsboard-agent/#deploy-mcp-server","title":"Deploy MCP server","text":"<p>For our Thingsboard Agent we will be needing the Thingsboard MCP Server</p>"},{"location":"Getting%20Started/thingsboard-agent/#thingsboard-mcp-server-deployment","title":"Thingsboard MCP Server Deployment","text":"<ol> <li>Go to the Context Hub. Search for Thingsboard and click Create. </li> <li> <p>Complete the Deployment Wizard.</p> <ul> <li>Give your deployment a name (e.g. my-thingsboard-deployment). </li> <li>Create a new app (e.g. thingsboard-agent). </li> <li> <p>Fill in the URL for the Thingsboard API, email and password. </p> <p>For Thingsboard Cloud, the API URL is https://thingsboard.cloud/api. Use your Thingsboard Cloud credentials.      3. Finish and Save Your Secret Key. </p> </li> </ul> <p>Your Thingsboard MCP server deployment is ready! Important: Copy the secret key for the app you created - you will need it soon.</p> </li> </ol>"},{"location":"Getting%20Started/thingsboard-agent/#try-out-the-playground-agent","title":"Try out the Playground Agent","text":"<p>Now let's quickly test out our Thingsboard Agent by navigating to the Playground. Select the Thingsboard MCP server you deployed earlier, and start chatting!</p> <p> </p>"},{"location":"Getting%20Started/thingsboard-agent/#bonus-use-claude-desktop-as-an-agent","title":"Bonus: Use Claude Desktop as an Agent","text":"<p>With your Thingsboard MCP server live, you can now build powerful dashboards, analyze device data, and automate insights\u2014all from chatting with Claude!</p>"},{"location":"Getting%20Started/thingsboard-agent/#configure-claude-desktop","title":"Configure Claude Desktop","text":"<p>At the moment Claude does not support SSE transport for MCP server connections. However, we can use mcp-proxy in order to proxy between stdio and SSE.</p>"},{"location":"Getting%20Started/thingsboard-agent/#install-uv","title":"Install uv","text":"macOS/LinuxWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre>"},{"location":"Getting%20Started/thingsboard-agent/#install-mcp-proxy","title":"Install mcp-proxy","text":"<pre><code>uv tool install mcp-proxy\n</code></pre>"},{"location":"Getting%20Started/thingsboard-agent/#connect-thingsboard-mcp-server-to-claude-desktop","title":"Connect Thingsboard MCP Server to Claude Desktop","text":"<ol> <li>Open Claude Desktop and go to the developer settings.</li> <li>Paste the following configuration (update the placeholders): <pre><code>{\n  \"mcpServers\": {\n    \"thingsboard\": {\n      \"command\": \"mcp-proxy\",\n      \"args\": [\n        \"https://&lt;your thingsboar mcp server deployment id&gt;.mcp.anycontext.io/sse\",\n        \"--headers\",\n        \"x-api-key\",\n        \"&lt;your secret key&gt;\"\n      ]\n    }\n  }\n}\n</code></pre> Tip: You can find a template for this configuration file by navigating to your Thingsboard MCP server's deployment details on the deployments page at https://app.anycontext.io/deployments</li> </ol> <p>After restarting Claude Desktop you should see that Claude Desktop is able to connect to the Thingsboard MCP server hosted on AnyContext. </p> <p>Using the Thingsboard MCP server we can make Claude generate interactive dashboards that include real telemetry data from Thingsboard Cloud.   </p>"},{"location":"Getting%20Started/usage-with-claude/","title":"Usage with Claude","text":"<p>Coming soon...</p>"}]}